local druid = require("druid.druid")
local data = require("scripts.modules.data")

local function finish_prize_cards()
    gui.set_enabled(data.screen.prize_cards, false)
end

local function init_prize_cards_screen(self)
    data.screen.prize_cards = gui.get_node("prize_cards")
    gui.set_enabled(data.screen.prize_cards, true)
    local prize_cards_info = data.prize_cards_info
    local original_size = vmath.vector3(565, 595, 0)
    
    gui.play_flipbook(gui.get_node("prize_board/prize/title"), "titulo_premio_1")
    local quant = #prize_cards_info[1]
    local scale
    local rows
    if quant > 3 then
        rows = 2
        scale = 0.5
    elseif quant == 3 then
        rows = 3
        scale  = 0.6
    elseif quant == 2 then
        scale = 0.8
        rows = 2
    elseif quant == 1 then
        scale = 1
    end
    if quant > 4  then
        rows = 3
        scale = 0.5
    end
    local prefab = gui.get_node("border")
    gui.set_size(prefab, original_size * scale)
    local grid = self.druid:new_static_grid("board_card_grid", prefab, rows)
    --grid.style.IS_DYNAMIC_NODE_POSES = true
    for c = 1, quant do
        local clone = gui.clone_tree(prefab)
        gui.set_enabled(clone["border"], true)
        data.update_card(clone, prize_cards_info[1][c])
        gui.set_scale(clone["background"], vmath.vector3(1*scale))
        grid:add(clone["border"])
    end

    local i = 2

    timer.delay(2, true, function (s, handle)
        for c = 1, #grid.nodes do
            gui.delete_node(grid.nodes[c])
        end
        grid:clear()
        self.druid:remove(grid)
        if i == #prize_cards_info + 1 then
            finish_prize_cards()
            msg.post("/Raffle#3-raffle", "finish")
            msg.post("/Raffle#5-prizes", "init")
            timer.cancel(handle)
        else
            gui.play_flipbook(gui.get_node("prize_board/prize/title"), "titulo_premio_" .. i)
            quant = #prize_cards_info[i]
            if quant > 3 then
                rows = 2
                scale = 0.5
            elseif quant == 3 then
                rows = 3
                scale  = 0.6
            elseif quant == 2 then
                scale = 0.8
                rows = 2
            elseif quant == 1 then
                scale = 1
            end
            if quant > 4  then
                rows = 3
                scale = 0.5
            end
            gui.set_size(prefab, original_size * scale)
            grid = self.druid:new_static_grid("board_card_grid", prefab, rows)
            grid.style.IS_DYNAMIC_NODE_POSES = true
            for c = 1, quant do
                local clone = gui.clone_tree(prefab)
                gui.set_enabled(clone["border"], true)
                gui.set_scale(clone["background"], vmath.vector3(1*scale))
                data.update_card(clone, prize_cards_info[i][c])
                grid:add(clone["border"])
            end
        end
        i = i + 1
    end)
end

function init(self)
    self.druid = druid.new(self)
    
end

function final(self)
    self.druid:final()
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
    if message_id == hash("init") then init_prize_cards_screen(self) end
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end