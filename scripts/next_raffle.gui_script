local druid = require("druid.druid")
local data = require("scripts.modules.data")

local lights1
local lights2
local a = function ()    end

local b = function ()    end

local function finish_next_raffle_screen()
    gui.set_enabled(data.screen.next_raffle, false)
end

local function update_rafle_info(template, id, donation, time, p1, p2, p3)
    gui.set_text(gui.get_node(template.."/id"), id)
    gui.set_text(gui.get_node(template.."/donation"), "R$".. data.money_mask(tonumber(donation)))
    gui.set_text(gui.get_node(template.."/time"), time)
    gui.set_text(gui.get_node(template.."/first_prize"), "R$".. data.money_mask(tonumber(p1)))
    gui.set_text(gui.get_node(template.."/second_prize"), "R$".. data.money_mask(tonumber(p2)))
    gui.set_text(gui.get_node(template.."/third_prize"), "R$".. data.money_mask(tonumber(p3)))
end

local function update_timer()
    local int_time
    local time = os.date("*t", os.time())
    time.hour = 15
    time.min = 16
    time.sec = 30
    int_time = os.time(time) - os.time()
    print(int_time)

    timer.delay(1, true, function (s,h)
        int_time = os.time(time) - os.time()
        print(os.date("*t", int_time).sec)
        gui.set_text(gui.get_node("timer_txt"), os.date("%M", int_time) .. ":" .. os.date("%S", int_time))
        if int_time == 0 then
            finish_next_raffle_screen()
            timer.cancel(lights2)
            msg.post("/Raffle#3-raffle", "init")
            timer.cancel(h)

        elseif int_time <= 60 then
            timer.cancel(lights1)
            if not lights2 then
                lights2 = timer.delay(1, true, b)
            end
        end
    end)
end


local function init_next_raffle_screen()
    data.screen.next_raffle = gui.get_node("next_raffle")
    gui.set_enabled(data.screen.next_raffle, true)
    a = function()
        data.turn_on_lights("raffle" .. 2 .. "/", 11, 0.07, function ()
            data.turn_on_lights("raffle" .. 3 .. "/", 11, 0.07, function ()
                data.turn_on_lights("raffle" .. 4 .. "/", 11, 0.07, function ()
                    data.turn_on_lights("jackpot/", 38, 0.02)
                end)
            end)
        end)

    end
    a()
    b = function()
        data.turn_on_lights("", 19, 0.035)
    end

    lights1 = timer.delay(7, true, a)
    
    update_rafle_info("raffle1", "0023", 500, "11:33", 10000, 5000, 2500)
    update_timer()
    
    
end


function init(self)
    self.druid = druid.new(self)
    --init_next_raffle_screen()

end

function final(self)
    self.druid:final()
end
function update(self, dt)
    self.druid:update(dt)
end
function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
    if message_id == hash("init") then init_next_raffle_screen(self) end
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end